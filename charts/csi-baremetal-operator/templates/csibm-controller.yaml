kind: Deployment
apiVersion: apps/v1
metadata:
  name: csi-operator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: csi-operator
  template:
    metadata:
      labels:
        app: csi-operator
    spec:
      serviceAccount: csi-operator-sa
      terminationGracePeriodSeconds: 10
      {{- if .Values.csi.deploy }}
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      {{- end }}
      containers:
      - name: controller
        image: {{- if .Values.env.test }} csi-baremetal-operator:{{ .Values.image.tag }}
               {{- else }} {{ .Values.image.registry }}/csi-baremetal-operator:{{ .Values.image.tag }}
               {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
          {{- if or (.Values.nodeSelector.key) (.Values.nodeSelector.value)}}
          - --nodeselector={{.Values.nodeSelector.key}}:{{.Values.nodeSelector.value}}
          {{- end }}
          - --namespace=$(NAMESPACE)
          - --useexternalannotation={{ .Values.feature.useexternalannotation }}
          {{- if and (.Values.feature.nodeIDAnnotation) (.Values.feature.useexternalannotation) }}
          - --nodeidannotation={{ .Values.feature.nodeIDAnnotation }}
          {{- end }}
          - --loglevel={{ .Values.log.level }}
          - --logformat={{ .Values.log.format }}
          - --version={{ .Values.image.tag }}
          - --deploy={{ .Values.csi.deploy }}
          - --drivemgr={{ .Values.csi.drivemgr }}
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        {{- if .Values.csi.deploy }}
        volumeMounts:
          - mountPath: /root/.kube/config
            name: kube-config
            mountPropagation: "HostToContainer"
      volumes:
        - name: kube-config
          hostPath:
            path: /etc/kubernetes/admin.conf
            type: File
        {{- end }}
