include variables.mk

### Lint

lint:
	${GO_ENV_VARS} golangci-lint -v run ./...

### Unit tests

coverage:
	go tool cover -html=coverage.out -o coverage.html

test:
	${GO_ENV_VARS} go test ${LDFLAGS} `go list ./... | grep -v halmgr | grep pkg` -race -cover -coverprofile=coverage.out -covermode=atomic

# Run tests for pr-validation with writing output to log file
# Test are different (ginkgo, go testing, etc.) so can't use native ginkgo methods to print junit output.
test-pr-validation:
	${GO_ENV_VARS} go test ${LDFLAGS} `go list ./... | grep -v halmgr` -v -race -cover -coverprofile=coverage.out > log.txt

install-junit-report:
	${GO_ENV_VARS} go get -u github.com/jstemmer/go-junit-report

# Convert go test output from log.txt to junit-style output. Split these steps because no matter if test fails,
# junit output must be collected
pr-validation-junit:
	cat log.txt >&1 | go-junit-report > report.xml

### E2E

# Run e2e tests for CI. All of these tests use ginkgo so we can use native ginkgo methods to print junit output.
# Also go test doesn't provide functionnality to save test's log into the file. Use > to archieve artifatcs.
test-ci: hack-for-kind
	cd tests && ${GO_ENV_VARS} CI=true CSI_VERSION=${CSI_VERSION} OPERATOR_VERSION=${OPERATOR_VERSION} go test ${LDFLAGS} -v e2e/baremetal_e2e_test.go -ginkgo.v -ginkgo.progress -ginkgo.skip="Serial" -ginkgo.junit-report=reports/report.xml -all-tests -kubeconfig=${HOME}/.kube/config -chartsDir ${CHARTS_DIR} -timeout 0 > log.txt

# Run e2e tests and run community tests only.
test-short-ci: hack-for-kind
	cd tests && ${GO_ENV_VARS} CI=true CSI_VERSION=${CSI_VERSION} OPERATOR_VERSION=${OPERATOR_VERSION} go test ${LDFLAGS} -v e2e/baremetal_e2e_test.go -ginkgo.v -ginkgo.progress -ginkgo.failFast -ginkgo.skip="Serial|volume-expand" -ginkgo.junit-report=reports/report.xml -timeout-short-ci=${SHORT_CI_TIMEOUT} -kubeconfig=${HOME}/.kube/config -chartsDir ${CHARTS_DIR} -timeout 0 > log.txt

test-short-ci-k8s-122: hack-for-kind
	cd tests && ${GO_ENV_VARS} CI=true CSI_VERSION=${CSI_VERSION} OPERATOR_VERSION=${OPERATOR_VERSION} go test ${LDFLAGS} -v e2e/baremetal_e2e_test.go -ginkgo.v -ginkgo.progress -ginkgo.failFast -ginkgo.skip="Serial|multiple" -ginkgo.junit-report=reports/report.xml -timeout-short-ci=${SHORT_CI_TIMEOUT} -kubeconfig=${HOME}/.kube/config -chartsDir ${CHARTS_DIR} -timeout 0 > log.txt

test-sanity-ci: hack-for-kind
	cd tests && ${GO_ENV_VARS} CI=true CSI_VERSION=${CSI_VERSION} OPERATOR_VERSION=${OPERATOR_VERSION} go test ${LDFLAGS} -v e2e/baremetal_e2e_test.go -timeout 0 -ginkgo.focus="$(strip $(subst ',, ${SANITY_TEST}))" -ginkgo.v -ginkgo.progress -ginkgo.junit-report=reports/report.xml -all-tests  -kubeconfig=${HOME}/.kube/config -chartsDir ${CHARTS_DIR} > log.txt

test-sanity-ci-k8s-122: hack-for-kind
	cd tests && ${GO_ENV_VARS} CI=true CSI_VERSION=${CSI_VERSION} OPERATOR_VERSION=${OPERATOR_VERSION} go test ${LDFLAGS} -v e2e/baremetal_e2e_test.go -timeout 0 -ginkgo.focus="$(strip $(subst ',, ${SANITY_TEST}))" -ginkgo.v -ginkgo.progress -ginkgo.junit-report=reports/report.xml -ginkgo.skip="block" -all-tests  -kubeconfig=${HOME}/.kube/config -chartsDir ${CHARTS_DIR} > log.txt

# Run commnity sanity tests for CSI. TODO https://github.com/dell/csi-baremetal/issues/298 Make sanity test work for expansion
# TODO enable tests back - https://github.com/dell/csi-baremetal/issues/371
test-sanity:
#	${GO_ENV_VARS} SANITY=true go test test/sanity/sanity_test.go -ginkgo.skip \
#	"ExpandVolume|\
#	ValidateVolumeCapabilities|\
#	should fail when the node does not exist|\
#	should fail when requesting to create a volume with already existing name and different capacity|\
#	should not fail when requesting to create a volume with already existing name and same capacity" -ginkgo.v -timeout=0

### Workflows

prepare-env:
	go install github.com/rhysd/actionlint/cmd/actionlint@latest
	go install github.com/nektos/act@latest

workflows-lint:
	actionlint

test-release-workflow:
	act release -e .github/workflows/tests/release.json --secret-file .github/workflows/tests/wf.secrets
	act release -e .github/workflows/tests/pre-release.json --secret-file .github/workflows/tests/wf.secrets

load-operator-image: pull-operator-image \
kind-tag-operator-image \
kind-load-operator-image 

pull-operator-image:
	docker pull ${REGISTRY}/${PROJECT}-${OPERATOR}:${OPERATOR_VERSION}

kind-tag-operator-image:	
	docker tag ${REGISTRY}/${PROJECT}-${OPERATOR}:${OPERATOR_VERSION} ${PROJECT}-${OPERATOR}:${OPERATOR_VERSION}

kind-load-operator-image:
	$(KIND) load docker-image ${PROJECT}-${OPERATOR}:${OPERATOR_VERSION}

kind-pull-images: kind-pull-sidecar-images
	docker pull ${REGISTRY}/${PROJECT}-${LOOPBACK_DRIVE_MGR}:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${NODE}:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${NODE}-kernel-5.4:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${CONTROLLER}:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${SCHEDULER}-${EXTENDER}:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${EXTENDER_PATCHER}:${TAG}
	# docker pull ${REGISTRY}/${PROJECT}-${SCHEDULER}:${TAG}
	docker pull ${REGISTRY}/${PROJECT}-${NODE_CONTROLLER}:${TAG}

kind-pull-sidecar-images:
	docker pull ${REGISTRY}/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	docker pull ${REGISTRY}/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	docker pull ${REGISTRY}/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	docker pull ${REGISTRY}/${CSI_RESIZER}:${CSI_RESIZER_TAG}
	docker pull ${REGISTRY}/${BUSYBOX}:${BUSYBOX_TAG}
	docker pull ${REGISTRY}/library/nginx:1.14-alpine
	docker pull ${REGISTRY}/library/centos:latest
	docker pull ${REGISTRY}/e2e-test-images/nginx:1.14-1
	docker pull ${REGISTRY}/e2e-test-images/busybox:1.29-2

kind-tag-images:
	docker tag ${REGISTRY}/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG} ${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	docker tag ${REGISTRY}/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG} ${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	docker tag ${REGISTRY}/${CSI_RESIZER}:${CSI_RESIZER_TAG} ${CSI_RESIZER}:${CSI_RESIZER_TAG}
	docker tag ${REGISTRY}/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG} ${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	docker tag ${REGISTRY}/${BUSYBOX}:${BUSYBOX_TAG} ${BUSYBOX}:${BUSYBOX_TAG}
	docker tag ${REGISTRY}/library/nginx:1.14-alpine docker.io/library/nginx:1.14-alpine
	docker tag ${REGISTRY}/library/centos:latest docker.io/library/centos:latest
	docker tag ${REGISTRY}/e2e-test-images/nginx:1.14-1 k8s.gcr.io/e2e-test-images/nginx:1.14-1
	docker tag ${REGISTRY}/e2e-test-images/busybox:1.29-2 registry.k8s.io/e2e-test-images/busybox:1.29-2
	docker tag ${REGISTRY}/${PROJECT}-${LOOPBACK_DRIVE_MGR}:${TAG} ${PROJECT}-${LOOPBACK_DRIVE_MGR}:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${NODE}:${TAG} ${PROJECT}-${NODE}:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${NODE}-kernel-5.4:${TAG} ${PROJECT}-${NODE}-kernel-5.4:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${CONTROLLER}:${TAG} ${PROJECT}-${CONTROLLER}:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${SCHEDULER}-${EXTENDER}:${TAG} ${PROJECT}-${SCHEDULER}-${EXTENDER}:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${EXTENDER_PATCHER}:${TAG} ${PROJECT}-${EXTENDER_PATCHER}:${TAG}
	# docker tag ${REGISTRY}/${PROJECT}-${SCHEDULER}:${TAG} ${PROJECT}-${SCHEDULER}:${TAG}
	docker tag ${REGISTRY}/${PROJECT}-${NODE_CONTROLLER}:${TAG} ${PROJECT}-${NODE_CONTROLLER}:${TAG}

kind-load-images:
	$(KIND) load docker-image ${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	$(KIND) load docker-image ${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	$(KIND) load docker-image ${CSI_RESIZER}:${CSI_RESIZER_TAG}
	$(KIND) load docker-image ${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	$(KIND) load docker-image ${BUSYBOX}:${BUSYBOX_TAG}
	$(KIND) load docker-image docker.io/library/nginx:1.14-alpine
	$(KIND) load docker-image docker.io/library/centos:latest
	$(KIND) load docker-image k8s.gcr.io/e2e-test-images/nginx:1.14-1
	$(KIND) load docker-image registry.k8s.io/e2e-test-images/busybox:1.29-2
	$(KIND) load docker-image ${PROJECT}-${LOOPBACK_DRIVE_MGR}:${TAG}
	$(KIND) load docker-image ${PROJECT}-${NODE}:${TAG}
	$(KIND) load docker-image ${PROJECT}-${NODE}-kernel-5.4:${TAG}
	$(KIND) load docker-image ${PROJECT}-${CONTROLLER}:${TAG}
	$(KIND) load docker-image ${PROJECT}-${SCHEDULER}-${EXTENDER}:${TAG}
	$(KIND) load docker-image ${PROJECT}-${EXTENDER_PATCHER}:${TAG}
	# $(KIND) load docker-image ${PROJECT}-${SCHEDULER}:${TAG}
	$(KIND) load docker-image ${PROJECT}-${NODE_CONTROLLER}:${TAG}

kind-build:
	chmod +x $(KIND_BUILD_DIR)/kind-build.sh
	$(KIND_BUILD_DIR)/kind-build.sh $(KIND_BUILD_DIR)

kind-install: kind-build
	# Delete actual
	rm -f /usr/bin/kind

	# Copy executive file
	cp $(KIND) /usr/bin

	# Check
	kind version

kind-create-cluster:
	$(KIND) create cluster --config $(KIND_CONFIG_DIR)/$(KIND_CONFIG) --image kindest/node:$(KIND_IMAGE_VERSION) --wait $(KIND_WAIT)

kind-delete-cluster:
	$(KIND) delete cluster

deps-docker-pull:
	docker pull k8s.gcr.io/sig-storage/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	docker pull k8s.gcr.io/sig-storage/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	docker pull k8s.gcr.io/sig-storage/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	docker pull k8s.gcr.io/sig-storage/${CSI_RESIZER}:${CSI_RESIZER_TAG}
	docker pull ${BUSYBOX}:${BUSYBOX_TAG}
	docker pull nginx:1.14-alpine
	docker pull centos:latest
	docker pull k8s.gcr.io/e2e-test-images/nginx:1.14-1
	docker pull registry.k8s.io/e2e-test-images/busybox:1.29-2

deps-docker-tag:
	docker tag k8s.gcr.io/sig-storage/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG} ${REGISTRY}/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	docker tag k8s.gcr.io/sig-storage/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG} ${REGISTRY}/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	docker tag k8s.gcr.io/sig-storage/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG} ${REGISTRY}/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	docker tag k8s.gcr.io/sig-storage/${CSI_RESIZER}:${CSI_RESIZER_TAG} ${REGISTRY}/${CSI_RESIZER}:${CSI_RESIZER_TAG}
	docker tag ${BUSYBOX}:${BUSYBOX_TAG} ${REGISTRY}/${BUSYBOX}:${BUSYBOX_TAG}
	docker tag nginx:1.14-alpine ${REGISTRY}/library/nginx:1.14-alpine
	docker tag centos:latest ${REGISTRY}/library/centos:latest
	docker tag k8s.gcr.io/e2e-test-images/nginx:1.14-1 ${REGISTRY}/e2e-test-images/nginx:1.14-1
	docker tag registry.k8s.io/e2e-test-images/busybox:1.29-2 ${REGISTRY}/e2e-test-images/busybox:1.29-2

deps-docker-push:
	docker push ${REGISTRY}/${CSI_PROVISIONER}:${CSI_PROVISIONER_TAG}
	docker push ${REGISTRY}/${CSI_REGISTRAR}:${CSI_REGISTRAR_TAG}
	docker push ${REGISTRY}/${LIVENESS_PROBE}:${LIVENESS_PROBE_TAG}
	docker push ${REGISTRY}/${CSI_RESIZER}:${CSI_RESIZER_TAG}
	docker push ${REGISTRY}/${BUSYBOX}:${BUSYBOX_TAG}
	docker push ${REGISTRY}/library/nginx:1.14-alpine
	docker push ${REGISTRY}/library/centos:latest
	docker push ${REGISTRY}/e2e-test-images/nginx:1.14-1
	docker push ${REGISTRY}/e2e-test-images/busybox:1.29-2

# for kind version >= 0.12.0,  the created k8s cluter replace master role with control-plane and 
# also the same applied to taint. and csi scheduler extender now have an affinity to only deployed
# on master role node. Here we hack it to kind cluster to added back old master label.
# for compatiable with old k8s version,  control-plane role may not exist, adding || true here to 
# make sure this command will not break the testing and ignore it and continue to test.
hack-for-kind:
	# add old compatiable master label, csi-baremetal-se have node affinity of master role
	kubectl label node kind-control-plane node-role.kubernetes.io/master=true || true
	# un-taint control-plane
	kubectl taint node kind-control-plane node-role.kubernetes.io/control-plane- || true
	# add master taint
	kubectl taint node kind-control-plane node-role.kubernetes.io/master:NoSchedule || true
