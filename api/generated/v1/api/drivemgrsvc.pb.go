// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.0
// source: drivemgrsvc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DrivesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *DrivesRequest) Reset() {
	*x = DrivesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivesRequest) ProtoMessage() {}

func (x *DrivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivesRequest.ProtoReflect.Descriptor instead.
func (*DrivesRequest) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{0}
}

func (x *DrivesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DrivesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*Drive `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *DrivesResponse) Reset() {
	*x = DrivesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivesResponse) ProtoMessage() {}

func (x *DrivesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivesResponse.ProtoReflect.Descriptor instead.
func (*DrivesResponse) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{1}
}

func (x *DrivesResponse) GetDisks() []*Drive {
	if x != nil {
		return x.Disks
	}
	return nil
}

type DriveLocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriveSerialNumber string `protobuf:"bytes,1,opt,name=driveSerialNumber,proto3" json:"driveSerialNumber,omitempty"`
	Action            int32  `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *DriveLocateRequest) Reset() {
	*x = DriveLocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveLocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveLocateRequest) ProtoMessage() {}

func (x *DriveLocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveLocateRequest.ProtoReflect.Descriptor instead.
func (*DriveLocateRequest) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{2}
}

func (x *DriveLocateRequest) GetDriveSerialNumber() string {
	if x != nil {
		return x.DriveSerialNumber
	}
	return ""
}

func (x *DriveLocateRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type DriveLocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DriveLocateResponse) Reset() {
	*x = DriveLocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveLocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveLocateResponse) ProtoMessage() {}

func (x *DriveLocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveLocateResponse.ProtoReflect.Descriptor instead.
func (*DriveLocateResponse) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{3}
}

func (x *DriveLocateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type NodeLocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action int32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *NodeLocateRequest) Reset() {
	*x = NodeLocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLocateRequest) ProtoMessage() {}

func (x *NodeLocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLocateRequest.ProtoReflect.Descriptor instead.
func (*NodeLocateRequest) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{4}
}

func (x *NodeLocateRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivemgrsvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_drivemgrsvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_drivemgrsvc_proto_rawDescGZIP(), []int{5}
}

var File_drivemgrsvc_proto protoreflect.FileDescriptor

var file_drivemgrsvc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6d, 0x67, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x31, 0x61, 0x70, 0x69, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2b, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc9, 0x01, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x76, 0x31, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x76, 0x31, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x31, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drivemgrsvc_proto_rawDescOnce sync.Once
	file_drivemgrsvc_proto_rawDescData = file_drivemgrsvc_proto_rawDesc
)

func file_drivemgrsvc_proto_rawDescGZIP() []byte {
	file_drivemgrsvc_proto_rawDescOnce.Do(func() {
		file_drivemgrsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_drivemgrsvc_proto_rawDescData)
	})
	return file_drivemgrsvc_proto_rawDescData
}

var file_drivemgrsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_drivemgrsvc_proto_goTypes = []interface{}{
	(*DrivesRequest)(nil),       // 0: v1api.DrivesRequest
	(*DrivesResponse)(nil),      // 1: v1api.DrivesResponse
	(*DriveLocateRequest)(nil),  // 2: v1api.DriveLocateRequest
	(*DriveLocateResponse)(nil), // 3: v1api.DriveLocateResponse
	(*NodeLocateRequest)(nil),   // 4: v1api.NodeLocateRequest
	(*Empty)(nil),               // 5: v1api.Empty
	(*Drive)(nil),               // 6: v1api.Drive
}
var file_drivemgrsvc_proto_depIdxs = []int32{
	6, // 0: v1api.DrivesResponse.disks:type_name -> v1api.Drive
	0, // 1: v1api.DriveService.GetDrivesList:input_type -> v1api.DrivesRequest
	2, // 2: v1api.DriveService.Locate:input_type -> v1api.DriveLocateRequest
	4, // 3: v1api.DriveService.LocateNode:input_type -> v1api.NodeLocateRequest
	1, // 4: v1api.DriveService.GetDrivesList:output_type -> v1api.DrivesResponse
	3, // 5: v1api.DriveService.Locate:output_type -> v1api.DriveLocateResponse
	5, // 6: v1api.DriveService.LocateNode:output_type -> v1api.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_drivemgrsvc_proto_init() }
func file_drivemgrsvc_proto_init() {
	if File_drivemgrsvc_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_drivemgrsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivemgrsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivemgrsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveLocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivemgrsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveLocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivemgrsvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivemgrsvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drivemgrsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drivemgrsvc_proto_goTypes,
		DependencyIndexes: file_drivemgrsvc_proto_depIdxs,
		MessageInfos:      file_drivemgrsvc_proto_msgTypes,
	}.Build()
	File_drivemgrsvc_proto = out.File
	file_drivemgrsvc_proto_rawDesc = nil
	file_drivemgrsvc_proto_goTypes = nil
	file_drivemgrsvc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriveServiceClient is the client API for DriveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriveServiceClient interface {
	GetDrivesList(ctx context.Context, in *DrivesRequest, opts ...grpc.CallOption) (*DrivesResponse, error)
	Locate(ctx context.Context, in *DriveLocateRequest, opts ...grpc.CallOption) (*DriveLocateResponse, error)
	LocateNode(ctx context.Context, in *NodeLocateRequest, opts ...grpc.CallOption) (*Empty, error)
}

type driveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriveServiceClient(cc grpc.ClientConnInterface) DriveServiceClient {
	return &driveServiceClient{cc}
}

func (c *driveServiceClient) GetDrivesList(ctx context.Context, in *DrivesRequest, opts ...grpc.CallOption) (*DrivesResponse, error) {
	out := new(DrivesResponse)
	err := c.cc.Invoke(ctx, "/v1api.DriveService/GetDrivesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveServiceClient) Locate(ctx context.Context, in *DriveLocateRequest, opts ...grpc.CallOption) (*DriveLocateResponse, error) {
	out := new(DriveLocateResponse)
	err := c.cc.Invoke(ctx, "/v1api.DriveService/Locate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveServiceClient) LocateNode(ctx context.Context, in *NodeLocateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1api.DriveService/LocateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriveServiceServer is the server API for DriveService service.
type DriveServiceServer interface {
	GetDrivesList(context.Context, *DrivesRequest) (*DrivesResponse, error)
	Locate(context.Context, *DriveLocateRequest) (*DriveLocateResponse, error)
	LocateNode(context.Context, *NodeLocateRequest) (*Empty, error)
}

// UnimplementedDriveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDriveServiceServer struct {
}

func (*UnimplementedDriveServiceServer) GetDrivesList(context.Context, *DrivesRequest) (*DrivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrivesList not implemented")
}
func (*UnimplementedDriveServiceServer) Locate(context.Context, *DriveLocateRequest) (*DriveLocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Locate not implemented")
}
func (*UnimplementedDriveServiceServer) LocateNode(context.Context, *NodeLocateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateNode not implemented")
}

func RegisterDriveServiceServer(s *grpc.Server, srv DriveServiceServer) {
	s.RegisterService(&_DriveService_serviceDesc, srv)
}

func _DriveService_GetDrivesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).GetDrivesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.DriveService/GetDrivesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).GetDrivesList(ctx, req.(*DrivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriveService_Locate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveLocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).Locate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.DriveService/Locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).Locate(ctx, req.(*DriveLocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriveService_LocateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeLocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).LocateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1api.DriveService/LocateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).LocateNode(ctx, req.(*NodeLocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1api.DriveService",
	HandlerType: (*DriveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDrivesList",
			Handler:    _DriveService_GetDrivesList_Handler,
		},
		{
			MethodName: "Locate",
			Handler:    _DriveService_Locate_Handler,
		},
		{
			MethodName: "LocateNode",
			Handler:    _DriveService_LocateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drivemgrsvc.proto",
}
